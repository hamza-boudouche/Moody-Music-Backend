base de données:
	type: sql (postgres?)
	tables:
		playlists:
			id: integer
			uri: string
			titre: string
			genre: string	
			mood: string
			primary key (id)
			foreign key (genre) references genres(genre)
			foreign key (mood) references moods(mood)
		genres:
			genre: string
			primary key (genre)
		moods:
			mood: string
			primary key (mood)
		users:
			id: integer
			username: string
			email: string
			preferred_music_genre: string
			hashed_password: string
			primary key (id)
			foreign key (preferred_music_genre) references genres(genre)
		playlists_scores:
			username: string
			mood: string
			uri: string
			score: integer
			primary key (username, uri)
			foreign key (usename) references users(username)
			foreign key (uri) references playlists(uri)
			foreign key (mood) references moods(mood)
librairies:
	sqlalchemy: db orm
	psycopg2: db driver
	pipenv: manages dependencies
	flask: api
	pyjwt: json web token

(testing the database)
#start
from app import db
from app.models import Genre, Mood, User, Playlist, Score

m = Mood(id=1, title='hiphop', description='...')
print(m)
g = Genre(id=1, title='chill', description='...')
print(g)
u = User(id=1, username='hamza', email='...', passwordHash='...', genre=g, commonMood=m)
print(u)
p = Playlist(id=1, uri='/spotify.com/', title='lofi', genre=g, mood=m)
print(p)
s = Score(user=u, playlist=p, score=2, mood=m)
print(s)
#end

additional stuff:
	✔️verify email: sending email with python yagmail https://github.com/kootenpv/yagmail#username-and-password
	✔️verify url validity: https://stackoverflow.com/questions/16778435/python-check-if-website-exists
	✔️verify email with regex
	✔️prevent multiple users from using the same email
	✔️initialise database with default values (onCreate and onUpdate)
	✔️verify if uri already exists in database
	✔️when updating user, check if new values are valid (add validation methods to class User)
	✔️when deleting user, on cascade delete user's playlists and scores
	✔️deleting playlist
	✔️modifying playlist (title, associated mood)
	✔️refactoring functions to classes
		✔️User.vote(Playlist, score)
		✔️User.add(Playlist)
		✔️Genre.getDefaultGenre()
		✔️Mood.getDefaultMood()
		✔️User.update(dict)

	adding middleware https://stackoverflow.com/questions/26736419/how-to-write-flask-decorator-with-request
		possible middlewares:
			verify token (blacklist + decoding + username equality)
			verify request form (contains all required fields)
	▶️logging events (received requests (date + url + request body + request params + response body + response http code))
	!! Containerize app with docker
